stages:
  - publish
  - deploy
  - postman_tests
  - convert_postman_to_k6
  - load_test_k6

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  KUBECONFIG: /builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/.kube/config

publish:
  stage: publish
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'

deploy_prod:
  stage: deploy
  environment:
    name: main
  image: bitnami/kubectl:latest
  script:
    - mkdir -p ~/.kube
    - echo "apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: $K8S_CA_CERT
    server: https://k8s.hamy.app:6443
  name: hamk8s-cluster
contexts:
- context:
    cluster: hamk8s-cluster
    user: gitlab
  name: hamk8s-cluster
current-context: hamk8s-cluster
users:
- name: gitlab
  user:
    token: $AGENT_TOKEN" > ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    - kubectl config set-context --current --namespace=gpt-discord-bot
    - kubectl set image deployment/gpt-discord-bot gpt-discord-bot=$TAG_COMMIT
  tags:
    - kubernetes
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

deploy_dev:
  stage: deploy
  environment:
    name: dev_deploy
  image: bitnami/kubectl:latest
  script:
    - mkdir -p ~/.kube
    - echo "apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: $K8S_CA_CERT
    server: https://k8s.hamy.app:6443
  name: hamk8s-cluster
contexts:
- context:
    cluster: hamk8s-cluster
    user: gitlab
  name: hamk8s-cluster
current-context: hamk8s-cluster
users:
- name: gitlab
  user:
    token: $AGENT_TOKEN" > ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    - kubectl config set-context --current --namespace=gpt-discord-bot
    - kubectl set image deployment/gpt-discord-bot gpt-discord-bot=$TAG_COMMIT
  tags:
    - kubernetes
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'

postman_tests_prod:
  stage: postman_tests
  environment:
    name: main
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker run -v "$CI_PROJECT_DIR/tests:/etc/newman" -t postman/newman:latest run "/etc/newman/Discord_GPT_Bot_Testing_PROD.postman_collection.json" --reporters="cli"
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

postman_tests_dev:
  stage: postman_tests
  environment:
    name: main
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker run -v "$CI_PROJECT_DIR/tests:/etc/newman" -t postman/newman:latest run "/etc/newman/Discord_GPT_Bot_Testing_DEV.postman_collection.json" --reporters="cli"
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'

convert_postman_to_k6_prod:
  stage: convert_postman_to_k6
  environment:
    name: main
  image: node:latest
  before_script:
    - npm install -g @apideck/postman-to-k6
  script:
    - postman-to-k6 "$CI_PROJECT_DIR/tests/Discord_GPT_Bot_Testing_PROD.postman_collection.json" -o $CI_PROJECT_DIR/tests/k6Script.js
  artifacts:
    paths:
      - $CI_PROJECT_DIR/tests/libs
      - $CI_PROJECT_DIR/tests/k6Script.js
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

convert_postman_to_k6_dev:
  stage: convert_postman_to_k6
  environment:
    name: dev_deploy
  image: node:latest
  before_script:
    - npm install -g @apideck/postman-to-k6
  script:
    - postman-to-k6 $CI_PROJECT_DIR/tests/Discord_GPT_Bot_Testing_DEV.postman_collection.json -o $CI_PROJECT_DIR/tests/k6Script.js
    - ls
  artifacts:
    paths:
      - $CI_PROJECT_DIR/tests/libs
      - $CI_PROJECT_DIR/tests/k6Script.js
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'

load_test_k6_prod:
  stage: load_test_k6
  environment:
    name: main
  image:
    name: loadimpact/k6:latest
    entrypoint: [""]
  script:
    - k6 run ./tests/k6Script.js
  dependencies:
    - convert_postman_to_k6_prod
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

load_test_k6_dev:
  stage: load_test_k6
  environment:
    name: dev_deploy
  image:
    name: loadimpact/k6:latest
    entrypoint: [""]
  script:
    - k6 run ./tests/k6Script.js
  dependencies:
    - convert_postman_to_k6_dev
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'
