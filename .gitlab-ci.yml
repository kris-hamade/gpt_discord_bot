stages:
  - publish
  - deploy
  - postman_tests
  - convert_postman_to_k6
  - load_test_k6
variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
publish:
  stage: publish
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'
deploy_prod:
  stage: deploy
  environment:
    name: main
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - apk add --no-cache curl
  script:
    - chmod og= "$ID_RSA_CLOUD"
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $PROD_CONTAINER_NAME || true"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $PROD_SERVER_PORT:3000 --name $PROD_CONTAINER_NAME -e API_KEY=$API_KEY -e DISCORD_TOKEN=$DISCORD_TOKEN -e OPENAI_API_KEY=$OPENAI_API_KEY -e MONGODB_URI=$MONGODB_URI -e SENTRY_DSN=$SENTRY_DSN -e AZURE_VISION_ENDPOINT=$AZURE_VISION_ENDPOINT -e AZURE_VISION_KEY=$AZURE_VISION_KEY -v $CI_PROJECT_DIR/prod/data-misc:/src/utils/data-misc --restart=unless-stopped $TAG_COMMIT"
  tags:
    - cloud
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
deploy_dev:
  stage: deploy
  environment:
    name: dev_deploy
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - apk add --no-cache curl
  script:
    - chmod og= "$ID_RSA_CLOUD"
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $DEV_CONTAINER_NAME || true"
    - ssh -i $ID_RSA_CLOUD -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $DEV_SERVER_PORT:3000 --name $DEV_CONTAINER_NAME -e API_KEY=$API_KEY -e DISCORD_TOKEN=$DEV_DISCORD_TOKEN -e OPENAI_API_KEY=$OPENAI_API_KEY -e MONGODB_URI=$MONGODB_URI -e SENTRY_DSN=$SENTRY_DSN -e AZURE_VISION_ENDPOINT=$AZURE_VISION_ENDPOINT -e AZURE_VISION_KEY=$AZURE_VISION_KEY -v $CI_PROJECT_DIR/dev/data-misc:/src/utils/data-misc --restart=unless-stopped $TAG_COMMIT"
  tags:
    - cloud
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'
postman_tests_prod:
  stage: postman_tests
  environment:
    name: main
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker run -v "$CI_PROJECT_DIR/tests:/etc/newman" -t postman/newman:latest run "/etc/newman/Discord_GPT_Bot_Testing_PROD.postman_collection.json" --reporters="cli"
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
postman_tests_dev:
  stage: postman_tests
  environment:
    name: main
  image: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - docker run -v "$CI_PROJECT_DIR/tests:/etc/newman" -t postman/newman:latest run "/etc/newman/Discord_GPT_Bot_Testing_DEV.postman_collection.json" --reporters="cli"
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'
convert_postman_to_k6_prod:
  stage: convert_postman_to_k6
  environment:
    name: main
  image: node:latest
  before_script:
    - npm install -g @apideck/postman-to-k6
  script:
    - postman-to-k6 "$CI_PROJECT_DIR/tests/Discord_GPT_Bot_Testing_PROD.postman_collection.json" -o $CI_PROJECT_DIR/tests/k6Script.js
  artifacts:
    paths:
      - $CI_PROJECT_DIR/tests/libs
      - $CI_PROJECT_DIR/tests/k6Script.js
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
convert_postman_to_k6_dev:
  stage: convert_postman_to_k6
  environment:
    name: dev_deploy
  image: node:latest
  before_script:
    - npm install -g @apideck/postman-to-k6
  script:
    - postman-to-k6 $CI_PROJECT_DIR/tests/Discord_GPT_Bot_Testing_DEV.postman_collection.json -o $CI_PROJECT_DIR/tests/k6Script.js
    - ls
  artifacts:
    paths:
      - $CI_PROJECT_DIR/tests/libs
      - $CI_PROJECT_DIR/tests/k6Script.js
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'
load_test_k6_prod:
  stage: load_test_k6
  environment:
    name: main
  image:
    name: loadimpact/k6:latest
    entrypoint: [""]
  script:
    - k6 run ./tests/k6Script.js
  dependencies:
    - convert_postman_to_k6_prod
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
load_test_k6_dev:
  stage: load_test_k6
  environment:
    name: dev_deploy
  image:
    name: loadimpact/k6:latest
    entrypoint: [""]
  script:
    - k6 run ./tests/k6Script.js
  dependencies:
    - convert_postman_to_k6_dev
  tags:
    - gitlab-org-docker
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev_deploy"'