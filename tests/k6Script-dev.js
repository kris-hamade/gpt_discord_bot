// Auto-generated by the postman-to-k6 converter
import "../libs/shim/core.js";
import "../libs/shim/expect.js";
import http from "k6/http";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    url: "",
    port: "PORTNUMBER"
  }
});

const files = {};
files["./test.json"] = http.file(open("./test.json", "b"), "test.json");

export default function() {
  postman[Request]({
    name: "Check Status",
    id: "35bd71ea-1136-4808-ad15-7f5bcecafac8",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/status",
    post(response) {
      var responseData = pm.response.text();
      var testStatus;

      var testStatus =
        responseData === "Bot is up and running"
          ? "Bot Status Check Was Successful - Bot Status is Up"
          : "Bot Status Check was Unsuccessful - Bot Status is Down";

      pm.test(testStatus, function() {
        pm.expect(responseData).to.eql("Bot is up and running");
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Get Chat History",
    id: "eefe93be-60fb-4b91-afaf-e0bb88dfdd45",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/chatHistory",
    post(response) {
      var jsonData = pm.response.json();

      var testStatus =
        jsonData.success === true
          ? "Chat History Check: Success"
          : "Chat History Check: Failure";

      pm.test(testStatus, function() {
        pm.expect(jsonData.success).to.be.true;
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "List Files",
    id: "8fb677b7-684b-42e9-a55f-39c811751c31",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/listFiles/All",
    post(response) {
      var jsonData = pm.response.json();

      var testStatus =
        jsonData.success === true
          ? "List Files Check: Success"
          : "List Files Check: Failure";

      pm.test(testStatus, function() {
        pm.expect(jsonData.success).to.be.true;
      });

      var journalFile = jsonData.files.find(file =>
        file.includes("JournalExport.json")
      );
      var handoutsFile = jsonData.files.find(file =>
        file.includes("HandoutsExport.json")
      );

      var journalTestName = journalFile
        ? "Check for Journal file: " + journalFile
        : "Journal file not found";

      pm.test(journalTestName, function() {
        pm.expect(journalFile).to.not.be.undefined;
      });

      var handoutsTestName = handoutsFile
        ? "Check for Handouts file: " + handoutsFile
        : "Handouts file not found";

      pm.test(handoutsTestName, function() {
        pm.expect(handoutsFile).to.not.be.undefined;
      });

      pm.test(
        `Check number of files is under 2 - Total Number of Files is ${jsonData.files.length}`,
        function() {
          pm.expect(jsonData.files.length).to.eql(2);
        }
      );
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Get Current Character Journal Data",
    id: "c8b23cfd-b1fd-4dd7-8cd5-2932a6dea755",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/currentJournal",
    post(response) {
      var jsonData = pm.response.json();

      var testStatus =
        jsonData.success === true
          ? "Journal Data Check: Success"
          : "Journal Data Check: Failure";

      pm.test(testStatus, function() {
        pm.expect(jsonData.success).to.be.true;
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Get Current Journal Handouts Data",
    id: "9c4ff6a0-a073-4685-9942-77e3d6d18005",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/currentHandouts",
    post(response) {
      var jsonData = pm.response.json();

      var testStatus =
        jsonData.success === true
          ? "Handouts Data Check: Success"
          : "Handouts Data Check: Failure";

      pm.test(testStatus, function() {
        pm.expect(jsonData.success).to.be.true;
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Check Configuration",
    id: "b9afdc6c-300f-40c2-801f-c5c222f7f6bf",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/config",
    post(response) {
      // Get the response data
      var responseData = pm.response.text();

      // Split the response into lines
      var lines = responseData.split("\n");

      // Create an object to store the key-value pairs
      var data = {};

      // Parse each line
      lines.forEach(line => {
        var parts = line.split(":");
        if (parts.length >= 2) {
          var key = parts.shift().trim();
          var value = parts.join(":").trim();
          data[key] = value;
        }
      });

      // Check each field
      pm.test("Check version number format - " + data["Version"], function() {
        var version = data["Version"];
        pm.expect(version).to.match(/^\d+\.\d+\.\d+\.\d+$/);
      });

      pm.test("Check GPT model - " + data["GPT Model"], function() {
        var model = data["GPT Model"];
        pm.expect(model).to.not.be.empty;
      });

      pm.test("Check GPT temperature - " + data["GPT Temperature"], function() {
        var temperature = data["GPT Temperature"];
        pm.expect(temperature).to.not.be.empty;
        pm.expect(temperature).to.not.eql("0");
      });

      pm.test("Check character limit - " + data["Character Limit"], function() {
        var limit = data["Character Limit"];
        pm.expect(limit).to.not.be.empty;
        pm.expect(limit).to.not.eql("0");
      });

      pm.test("Check start time - " + data["Start Time"], function() {
        var time = data["Start Time"];
        pm.expect(time).to.exist;
        if (time) {
          pm.expect(time).to.not.be.empty;
        }
      });

      pm.test("Check uptime - " + data["Uptime"], function() {
        var uptime = data["Uptime"];
        pm.expect(uptime).to.not.be.empty;
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Check Uptime",
    id: "8370bdd7-1846-498a-a713-ab1015d0b2da",
    method: "GET",
    address: "http://haggledev.hamy.dev/api/uptime",
    post(response) {
      var responseData = pm.response.text();
      var testStatus;

      var testStatus =
        responseData !== null
          ? `Uptime Check Was Successful - Uptime is ${responseData}`
          : "Uptime Check Was Unsuccessful";

      pm.test(testStatus, function() {
        pm.expect(responseData).to.not.be.empty;
      });
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Check Roll20 Handouts Data Update Endpoint",
    id: "7a471b76-a4cd-4941-9a50-0065731cf9d6",
    method: "POST",
    address: "http://haggledev.hamy.dev/api/uploadRoll20Data/Handouts",
    data: {
      file: files["./test.json"]
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });

  postman[Request]({
    name: "Check Roll20 Journal Data Update Endpoint",
    id: "4822a510-a25f-41b8-9575-0c3a00e8b4ac",
    method: "POST",
    address: "http://haggledev.hamy.dev/api/uploadRoll20Data/Journal",
    data: {
      file: files["./test.json"]
    },
    auth(config, Var) {
      config.options.Authorization =
        "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864";
    }
  });
}
