{
	"info": {
		"_postman_id": "441e1241-6e53-46f7-b6fd-47bd8385dfab",
		"name": "Discord_GPT_Bot_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7032109",
		"_collection_link": "https://interstellar-resonance-446087.postman.co/workspace/My-Workspace~d7d36c91-8122-43e2-804c-e58dfd790a46/collection/7032109-441e1241-6e53-46f7-b6fd-47bd8385dfab?action=share&creator=7032109&source=collection_link"
	},
	"item": [
		{
			"name": "Check Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.text();\r",
							"var testStatus\r",
							"\r",
							"var testStatus = (responseData === \"Bot is up and running\") \r",
							"                 ? \"Bot Status Check Was Successful - Bot Status is Up\" \r",
							"                 : \"Bot Status Check was Unsuccessful - Bot Status is Down\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"        pm.expect(responseData).to.eql(\"Bot is up and running\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/status",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Chat History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var testStatus = (jsonData.success === true)\r",
							"                 ? \"Chat History Check: Success\"\r",
							"                 : \"Chat History Check: Failure\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/chatHistory",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"chatHistory"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var testStatus = (jsonData.success === true)\r",
							"                 ? \"List Files Check: Success\"\r",
							"                 : \"List Files Check: Failure\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});\r",
							"\r",
							"var journalFile = jsonData.files.find(file => file.includes(\"JournalExport.json\"));\r",
							"var handoutsFile = jsonData.files.find(file => file.includes(\"HandoutsExport.json\"));\r",
							"\r",
							"var journalTestName = journalFile\r",
							"                      ? \"Check for Journal file: \" + journalFile\r",
							"                      : \"Journal file not found\";\r",
							"\r",
							"pm.test(journalTestName, function () {\r",
							"    pm.expect(journalFile).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"var handoutsTestName = handoutsFile\r",
							"                       ? \"Check for Handouts file: \" + handoutsFile\r",
							"                       : \"Handouts file not found\";\r",
							"\r",
							"pm.test(handoutsTestName, function () {\r",
							"    pm.expect(handoutsFile).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(`Check number of files is under 2 - Total Number of Files is ${jsonData.files.length}`, function () {\r",
							"    pm.expect(jsonData.files.length).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/listFiles/All",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"listFiles",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current Character Journal Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var testStatus = (jsonData.success === true)\r",
							"                 ? \"Journal Data Check: Success\"\r",
							"                 : \"Journal Data Check: Failure\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/currentJournal",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"currentJournal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current Journal Handouts Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var testStatus = (jsonData.success === true)\r",
							"                 ? \"Handouts Data Check: Success\"\r",
							"                 : \"Handouts Data Check: Failure\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/currentHandouts",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"currentHandouts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Configuration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the response data\r",
							"var responseData = pm.response.text();\r",
							"\r",
							"// Split the response into lines\r",
							"var lines = responseData.split('\\n');\r",
							"\r",
							"// Create an object to store the key-value pairs\r",
							"var data = {};\r",
							"\r",
							"// Parse each line\r",
							"lines.forEach(line => {\r",
							"    var parts = line.split(':');\r",
							"    if (parts.length >= 2) {\r",
							"        var key = parts.shift().trim();\r",
							"        var value = parts.join(':').trim();\r",
							"        data[key] = value;\r",
							"    }\r",
							"});\r",
							"\r",
							"// Check each field\r",
							"pm.test(\"Check version number format - \" + data['Version'], function () {\r",
							"    var version = data['Version'];\r",
							"    pm.expect(version).to.match(/^\\d+\\.\\d+\\.\\d+\\.\\d+$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Check character limit - \" + data['Character Limit'], function () {\r",
							"    var limit = data['Character Limit'];\r",
							"    pm.expect(limit).to.not.be.empty;\r",
							"    pm.expect(limit).to.not.eql('0');\r",
							"});\r",
							"\r",
							"pm.test(\"Check start time - \" + data['Start Time'], function () {\r",
							"    var time = data['Start Time'];\r",
							"    pm.expect(time).to.exist;\r",
							"    if (time) {\r",
							"        pm.expect(time).to.not.be.empty;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Check uptime - \" + data['Uptime'], function () {\r",
							"    var uptime = data['Uptime'];\r",
							"    pm.expect(uptime).to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/config",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Uptime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.text();\r",
							"var testStatus\r",
							"\r",
							"var testStatus = (responseData !== null) \r",
							"                 ? `Uptime Check Was Successful - Uptime is ${responseData}` \r",
							"                 : \"Uptime Check Was Unsuccessful\";\r",
							"\r",
							"pm.test(testStatus, function () {\r",
							"        pm.expect(responseData).to.not.be.empty;\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "haggle.hamy.dev/api/uptime",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"uptime"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Roll20 Handouts Data Update Endpoint",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "./test.json"
						}
					]
				},
				"url": {
					"raw": "haggle.hamy.dev/api/uploadRoll20Data/Handouts",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"uploadRoll20Data",
						"Handouts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Roll20 Journal Data Update Endpoint",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "./test.json"
						}
					]
				},
				"url": {
					"raw": "haggle.hamy.dev/api/uploadRoll20Data/Journal",
					"host": [
						"haggle.hamy.dev"
					],
					"path": [
						"api",
						"uploadRoll20Data",
						"Journal"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "fd211164e731c6577a848d0331554f487787fefe8286c9f6d66717ed08a0b864",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "port",
			"value": "PORTNUMBER",
			"type": "string",
			"disabled": true
		}
	]
}